
- создать второй поток, передать в него имена входящего/исходящего интерфейса 
- в новом потоке создать два сырых сокета (socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))) -> забиндить на указанные имена интерфейсов
  (индексы соответствующих интерфейсов можно узнать получив связный список с помощью getifaddrs, 
   либо же можно получить индексы из /sys/class/net/{имя интерфейса}/ifindex)
- в цикле получить пакет, записать udp payload (ethernet фрейм разбирать с помощью структур ethhdr, iphdr, udphdr) в некий глобальный буфер, 
  флагом просигнализировать в основной поток о приеме очередного пакета (по аналогии с tcp-wpt-srv), дождаться окончания обработки, на основе модифициолванного 
  udp payload софрмировать пакет на отправку и собственно отправить
- в основном потоке после создания дочернего ждать сигнал о приеме очередного пакета, как только оный появился переворачиваем данные в буфере задом наперед и сигнализируем
  о том что буфер обработан (можно глобальным флагом, можно по аналогии с tcp-wpt-srv с помощью мьютекса)
  
зы: по хорошему надо бы реализовать какое то штатное завершение с закрытием сокета и уничтожением мьютекса
    (как вариант подменить обрабтчик SIGINT в самом начале функции main)



